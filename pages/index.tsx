import { PageAnimationWrapper } from '@/components';
import LoginForm from '@/components/_loginForm/LoginForm';
import ProvidersBlock from '@/components/_loginForm/ProvidersBlock';
import RegistrationForm from '@/components/_loginForm/RegistrationForm';
import { Box, Button, Flex, Text, useColorMode } from '@chakra-ui/react';
import { useSession } from 'next-auth/react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import styles from '../styles/bgAnimation.module.css';
import { LinkStyleButtonStyles } from '@/styles/additionalStyles';
import { MoonIcon, SunIcon } from '@chakra-ui/icons';
import { useBackgroundColor } from '@/hooks/useBackgroundColor';
import { BsMoonFill, BsSun } from 'react-icons/bs';


export default function Home() {
  const session = useSession();
  const router = useRouter();
  const [isRegistration, setFormType] = useState(false);
  const bgColor = useBackgroundColor();

  useEffect(() => {
    if (session.status === 'authenticated') {
      router.push('/users');
    }
  }, [session.status]);

  const { toggleColorMode, colorMode } = useColorMode();
  const isLight = colorMode === 'light';

  return (
    <>
      <Head>
        <title>CRUD APP</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageAnimationWrapper>
        <div className={isLight ? styles.animation_container : styles.animation_container_dark}>
          <Button {...LinkStyleButtonStyles} position={'absolute'} top='1em' left='1em'
            onClick={() => toggleColorMode()}>
            {
              isLight ?
                <BsMoonFill color='white' fontSize='1.5em'
                //  _hover={{ cursor: 'pointer', color: '#EEE' }} transition='.33s'
                />
                :
                <BsSun color='white' fontSize='1.5em'
                //  _hover={{ cursor: 'pointer', color: '#EEE' }} transition='.33s'
                />
            }
          </Button>
          <Box backgroundColor={bgColor} w='50%' p='2em' m='0 auto' borderRadius='.5em' zIndex={999}>
            {
              isRegistration ?
                <RegistrationForm successHandler={() => setFormType(false)} />
                :
                <LoginForm />
            }
            <ProvidersBlock isRegistration={isRegistration} />
            <Flex alignItems='center' w='100%' gap='.5em' justifyContent='center'>
              {
                !isRegistration ?
                  <>
                    <Text>Don&apos;t have an account yet?</Text>
                    <Button variant='link' onClick={() => setFormType(true)}>Sign up now</Button>
                  </>
                  :
                  <>
                    <Text>Already have an account?</Text>
                    <Button variant='link' onClick={() => setFormType(false)}>Sign in now</Button>
                  </>
              }
            </Flex>
          </Box>
          <div className={isLight ? styles.wave : styles.wave_dark}></div>
          <div className={isLight ? styles.wave : styles.wave_dark}></div>
          <div className={isLight ? styles.wave : styles.wave_dark}></div>
        </div>
      </PageAnimationWrapper >
    </>
  )
}
